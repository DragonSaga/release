local this = nil
require 'HallOfFame_Pure_pb.lua'
-- require 'HallOfFame_Pure_Tips_pb.lua'
-- require 'HallOfFame_Pure_support_pb.lua'
require 'LuaPureSeasonTable.lua'
require 'LuaUltimateDragonTableTable.lua'
require 'LuaMilitaryRankByExploitTable.lua'

LuaHallFameDoc_Pure = {}
local this = LuaHallFameDoc_Pure

HALL_FAME_PURE_RANK_TYPE = {rank = 1, military = 2, dragonNest = 3, achievement = 4}
HALL_FAME_PURE_SHOW_NUM = 6

local _handler

local _curSeason
local _curRankType
local _curProfession
local _curDragonNestRankType
local _curProfession_total

local _curRankList = {}
local _rankType = {[1] = 9, [2] = 25, [3] = 300, [4] = 84}
local _onlyTopData
local _ultimateDragonTable
local _levelNames = {}
local _dragonNestRankTypes = {}
local _lastDragonNestRankTypes = {}
local _seasonTable
local _profNames = {}
local _maxRoleCount
local _curRoleIDs = {}
local _isRefreshSupport
local _militaryTable
local _militarySpriteNames = {}
local _militaryNames = {}
local _curProfessions = {}
local _curTopRankData
local _curDragonNestRankType_total
local loadTableCount = 0
local initSeasonTableCount

---------------------------------------------------init-------------------------------------------------------
function LuaHallFameDoc_Pure.InitData()
    _maxRoleCount = tonumber(Hotfix.GetGlobalString('MaxRole'))
    for i = 1, _maxRoleCount, 1 do
        _profNames[i] = Hotfix.CallSingleMethod('XProfessionSkillMgr', true, false, 'GetProfName', i)
    end

    _curRankType = HALL_FAME_PURE_RANK_TYPE.rank
    
    local curSeason = Hotfix.GetDocumentMember("PureSeasonDocument","CurrSeasonId",true,false)

    if curSeason == 9999 or curSeason == 10000 then
        print('<cololr=red>current season error!!!</color>')
        _handler.DestroySelf()
    end
    --当前要显示的赛季，而非当前赛季
    _curSeason = curSeason - 1

    _curProfession = 0
    _curProfession_total = 0

    for i = 1, HALL_FAME_PURE_SHOW_NUM, 1 do
        _curRoleIDs[i] = -1
    end

    _isRefreshSupport = false

    initSeasonTableCount = 0
end

function LuaHallFameDoc_Pure.InitData_table()
    _seasonTable = ReadPureSeasonTable('pure/Table/PureSeason')
    for index = 1, #_seasonTable, 1 do
        _seasonTable[index] = _seasonTable[index + 2]
    end
    for index, value in ipairs(_seasonTable) do
        if value.SeasonID > _curSeason then
            _seasonTable[index] = nil
        end
    end

    _ultimateDragonTable = ReadUltimateDragonTableTable('pure/Table/UltimateDragonTable')
    this.ChangeCurDragonNests()
    _curDragonNestRankType = _dragonNestRankTypes[1]
    _curDragonNestRankType_total = _dragonNestRankTypes[1]

    _militaryTable = ReadMilitaryRankByExploitTable('pure/Table/MilitaryRankByExploit')
    for index, value in ipairs(_militaryTable) do
        _militarySpriteNames[index] = value.Icon
        _militaryNames[index] = value.Name
    end
end

function LuaHallFameDoc_Pure.initSeasonTableByStartSeason(startSeason)
    if startSeason == 9999 then
        startSeason = -2
    elseif startSeason == 10000 then
        startSeason = -1
    end

    local validStartIndex = 1
    for index, value in ipairs(_seasonTable) do
        if value.SeasonID < startSeason then
            validStartIndex = math.max(index + 1, validStartIndex)
        else
            break
        end
    end
    for index, value in ipairs(_seasonTable) do
        _seasonTable[index] = _seasonTable[index + validStartIndex - 1]
    end
    local temp
    local size = #_seasonTable
    for i = 1, math.floor(size / 2), 1 do
        temp = _seasonTable[i]
        _seasonTable[i] = _seasonTable[size - i + 1]
        _seasonTable[size - i + 1] = temp
    end
end

-----------------------------------------communicate with dlg-------------------------------------------------------
function LuaHallFameDoc_Pure.SetMainHandler(handler)
    _handler = handler
end

function LuaHallFameDoc_Pure.HideMainCity()
    if _handler ~= nil then
        _handler.HideMainCity()
    end
end

function LuaHallFameDoc_Pure.DestroySelf()
    if _handler ~= nil then
        _handler.DestroySelf()
    end
end

function LuaHallFameDoc_Pure.Reconnect()
    if _handler ~= nil then
        _handler.Reconnect()
    end
end

------------------------------------------------communicate with dlg---get/set data-------------------------------------------------------
function LuaHallFameDoc_Pure.GetCurSeason()
    return _curSeason
end
function LuaHallFameDoc_Pure.GetCurRankType()
    return _curRankType
end
function LuaHallFameDoc_Pure.GetCurProfession()
    return _curProfession
end
function LuaHallFameDoc_Pure.GetCurSeasonName()
    for index, value in ipairs(_seasonTable) do
        if value.SeasonID == _curSeason then
            return value.Name
        end
    end
    return ''
end
function LuaHallFameDoc_Pure.GetCurProfessionName()
    if _curProfession == 0 then
        return Hotfix.GetStringTable('ALL')
    end
    return Hotfix.CallSingleMethod('XProfessionSkillMgr', true, false, 'GetByProfID', _curProfession).ProfName
end
function LuaHallFameDoc_Pure.GetCurLevelName()
    for index, value in ipairs(_dragonNestRankTypes) do
        if value == _curDragonNestRankType then
            return _levelNames[index]
        end
    end
    return _levelNames[#_levelNames]
end

function LuaHallFameDoc_Pure.GetCurRankDataByIndex(index)
    return _curRankList[index]
end
-- function LuaHallFameDoc_Pure.GetTopRoleOutLookByIndex(idx)
--     return _toproleoutlook[idx]
-- end
function LuaHallFameDoc_Pure.GetSeasonTable()
    return _seasonTable
end
function LuaHallFameDoc_Pure.GetProfNameByIndex(index)
    if index == 0 then
        return Hotfix.GetStringTable('ALL')
    end
    return _profNames[index]
end
function LuaHallFameDoc_Pure.GetMaxRoleCount()
    return _maxRoleCount
end
function LuaHallFameDoc_Pure.GetLevelNames()
    return _levelNames
end
function LuaHallFameDoc_Pure.GetDragonNestRankTypeByIndex(index)
    return _dragonNestRankTypes[index]
end
function LuaHallFameDoc_Pure.GetLastDragonNestRankTypeByIndex(index)
    return _lastDragonNestRankTypes[index]
end
function LuaHallFameDoc_Pure.GetLastDragonNestRankTypes()
    return _lastDragonNestRankTypes
end

function LuaHallFameDoc_Pure.GetCurRoleIDByIndex(index)
    return _curRoleIDs[index]
end
function LuaHallFameDoc_Pure.GetIsRefreshSupport()
    return _isRefreshSupport
end
function LuaHallFameDoc_Pure.GetMilitarySpriteNameByRank(rank)
    return _militarySpriteNames[rank]
end
function LuaHallFameDoc_Pure.GetMilitaryNameByRank(rank)
    return _militaryNames[rank]
end
function LuaHallFameDoc_Pure.GetDragonNestRankTypes()
    return _dragonNestRankTypes
end

function LuaHallFameDoc_Pure.SetCurSeason(...)
    _curSeason = ...
end
function LuaHallFameDoc_Pure.SetCurRankType(...)
    _curRankType = ...
end
function LuaHallFameDoc_Pure.SetCurProfession(...)
    _curProfession = ...
end
function LuaHallFameDoc_Pure.SetCurDragonNestRankType(...)
    _curDragonNestRankType = ...
end
function LuaHallFameDoc_Pure.SetCurProfession_total(...)
    _curProfession_total = ...
end
function LuaHallFameDoc_Pure.SetIsRefreshSupport(...)
    _isRefreshSupport = ...
end
function LuaHallFameDoc_Pure.SetDragonNestRankType_total(...)
    _curDragonNestRankType_total = ...
end

function LuaHallFameDoc_Pure.ChangeCurDragonNests()
    _lastDragonNestRankTypes = table.clone(_dragonNestRankTypes)
    _dragonNestRankTypes = {}
    _levelNames = {}
    for index, value in ipairs(_ultimateDragonTable) do
        if value.Season[1] == 10000 then
            value.Season[1] = value.Season[2]
        end
        if value.Season[1] == _curSeason then
            if _dragonNestRankTypes[value.UltimateLevel] == nil then
                _dragonNestRankTypes[value.UltimateLevel] = value.RankType
                _levelNames[value.UltimateLevel] = value.LevelName
            end
        end
    end
end
function LuaHallFameDoc_Pure.ChangeCurDragonNestRankType()
    local hasCurDragonNestRankType = false
    for index, value in ipairs(_dragonNestRankTypes) do
        if value == _curDragonNestRankType then
            hasCurDragonNestRankType = true
        end
    end
    if not hasCurDragonNestRankType then
        _curDragonNestRankType = _dragonNestRankTypes[#_dragonNestRankTypes]
    end
end

-------------------------------------------------msg-------------------------------------------------------------
function LuaHallFameDoc_Pure.ReqRankList(onlytopData)
    local  msg = GetProtoBufSendTable("ClientQueryHallofFameArg")
    msg.seasonid = _curSeason
    msg.onlytopData = onlytopData
    msg.RankType = _rankType[_curRankType]
    if onlytopData then
        if _curRankType == HALL_FAME_PURE_RANK_TYPE.rank or _curRankType == HALL_FAME_PURE_RANK_TYPE.military then
            msg.profession = _curProfession
        elseif _curRankType == HALL_FAME_PURE_RANK_TYPE.dragonNest then
            msg.RankType = _curDragonNestRankType
        end
    else
        if _curRankType == HALL_FAME_PURE_RANK_TYPE.rank or _curRankType == HALL_FAME_PURE_RANK_TYPE.military then
            msg.profession = _curProfession_total
        elseif _curRankType == HALL_FAME_PURE_RANK_TYPE.dragonNest then
            msg.RankType = _curDragonNestRankType_total
        end
    end
    print('<color=yellow>------------------send msg: </color>', '  seasonid:', msg.seasonid, '  onlytopdata:', msg.onlytopData, '  rank type:', msg.RankType, '  profession:', msg.profession)
    local pb_data = msg:SerializeToString()
    pb_data = pb_data
    if pb_data ~= nil then
        print "do send"
        Hotfix.SendLuaByteRPC(16841, pb_data, this.OnGetRankList, this.OnErr)
        _onlyTopData = onlytopData
    else
        print('test proto data is nil')
    end
end

function LuaHallFameDoc_Pure.OnGetRankList(data, length)
    -- print("length: "..length)
    local  msg = ParseProtoBufToTable("ClientQueryHallofFameRes",data)
    if msg == nil then
        return
    end

    print('errorcode is: ' .. tostring(msg.ErrorCode))
    if msg.ErrorCode ~= 0 then
        if msg.ErrorCode ~= ERR_INVALID_REQUEST then
            Hotfix.LuaShowSystemTipErrCode(msg.ErrorCode)
        end
    else
        print('<color=yellow>====================</color>on get rank list :   ', msg)
        local RankData = {}
        local idx = 1
        if msg.RankList ~= nil and msg.RankList.RankData ~= nil then
            for index, value in ipairs(msg.RankList.RankData) do
                local b = value.RoleNames ~= nil or value.RoleName ~= nil
                if value.strRoleid ~= '0' and b then
                    RankData[idx] = value
                    idx = idx + 1
                end
            end
        end
        
        if msg.RankAllCount == HALL_FAME_PURE_SHOW_NUM then
            _curTopRankData = msg
            for i = 1, HALL_FAME_PURE_SHOW_NUM, 1 do
                _curRoleIDs[i] = -1
            end

            if initSeasonTableCount <= 0 then
                this.initSeasonTableByStartSeason(msg.startseasonid)
                initSeasonTableCount = initSeasonTableCount + 1
            end

            local b = RankData ~= nil and #RankData >= 1 and RankData[1].strRoleIds ~= nil and #RankData[1].strRoleIds >= 1
            if b then
                for index, value in ipairs(RankData[1].strRoleIds) do
                    _curRoleIDs[index] = value
                end
            else
                for index, value in ipairs(RankData) do
                    _curRoleIDs[index] = value.strRoleid
                end
            end
            _handler.RefreshUI(RankData, msg.toproleoutlook, msg.likenum, msg.canlike)
        else
            _curRankList = RankData
            _handler.RefreshUI_total(RankData)
        end
    end
end

function LuaHallFameDoc_Pure.ReqDetails(roleID, selectedIndex)
    local  msg = GetProtoBufSendTable("ClientQueryHallofFameTipsArg")
    msg.roleid = roleID
    msg.seasonid = _curSeason
    msg.RankType = _rankType[_curRankType]
    msg.profession = _curTopRankData.toproleoutlook[selectedIndex].profession
    if _curRankType == HALL_FAME_PURE_RANK_TYPE.dragonNest then
        msg.RankType = _curDragonNestRankType
    end

    print('<color=yellow>---------------------send details:</color>', 'roleid:', msg.roleid, 'seasonid:', msg.seasonid, 'ranktype:', msg.RankType, 'profession:', msg.profession)

    local pb_data = msg:SerializeToString()
    pb_data = pb_data
    if pb_data ~= nil then
        Hotfix.SendLuaByteRPC(16662, pb_data, this.OnGetDetails, this.OnErr)
    else
        print('test proto data is nil')
    end
end

function LuaHallFameDoc_Pure.OnGetDetails(data, length)
    local  msg = ParseProtoBufToTable("ClientQueryHallofFameTipsRes",data)
    if msg == nil then
        return
    end


    print('errorcode is: ' .. tostring(msg.ErrorCode))
    if msg.ErrorCode ~= 0 then
        if msg.ErrorCode ~= ERR_INVALID_REQUEST then
            Hotfix.LuaShowSystemTipErrCode(msg.ErrorCode)
        end
    else
        print('<color=yellow>====================</color>on get tips :   ', msg)
        LuaHallFameDlg_Pure.RefreshUI_detail(msg)
    end
end

function LuaHallFameDoc_Pure.ReqSupport(roleID)
    local  msg = GetProtoBufSendTable("ClientQueryHallofFameLikeArg")
    msg.roleid_star = roleID
    msg.seasonid = _curSeason
    msg.ranktype = _rankType[_curRankType]
    if _curRankType == HALL_FAME_PURE_RANK_TYPE.dragonNest then
        msg.ranktype = _curDragonNestRankType
    end
    print('<color=yellow>---------------------send support:</color>', msg.roleid_star, msg.seasonid, msg.ranktype)

    local pb_data = msg:SerializeToString()
    pb_data = pb_data
    if pb_data ~= nil then
        Hotfix.SendLuaByteRPC(41234, pb_data, this.OnGetSupport, this.OnErr)
    else
        print('test proto data is nil')
    end
end

function LuaHallFameDoc_Pure.OnGetSupport(data, length)
    local  msg = ParseProtoBufToTable("ClientQueryHallofFameLikeRes",data)
    if msg == nil then
        return
    end


    print('errorcode is: ' .. tostring(msg.ErrorCode))
    if msg.ErrorCode ~= 0 then
        if msg.ErrorCode ~= ERR_INVALID_REQUEST then
            Hotfix.LuaShowSystemTipErrCode(msg.ErrorCode)
        end
    else
        print('<color=yellow>====================</color>on get support :   ', msg)
        _isRefreshSupport = true
        this.ReqRankList(true)
    end
end

function LuaHallFameDoc_Pure.OnErr(...)
    print('lua LuaHallFameDoc_Pure OnErr!')
end
return this
