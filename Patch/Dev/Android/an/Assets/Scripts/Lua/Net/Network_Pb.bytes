local M = {}

local pb = require "pb"
pb.option "enum_as_value"
pb.option "use_default_values"
pb.option "use_default_metatable"

--todo:移动端优先读热更目录，然后再读StreamingAssets与Fmod的bank音效文件一样
-- local sourcePath = PathUtility.OnlyStreamingAssetsPath
-- print("sourcePath: "..sourcePath)
-- local strAssetPath = CS.Application.streamingAssetsPath
-- print("strAssetPath: "..tostring(strAssetPath))
-- local pbPath = sourcePath.."/LuaPb/PB.bank"
-- print("pbPath: "..pbPath)
-- pb.loadfile(pbPath)     --("Assets/StreamingAssets/LuaPb/PB.bank")
local ResourcesLoaderMgr = CS.DC.Framework.Loaders.ResourceLoderMgr
local pbData = ResourcesLoaderMgr.GetBytesByPath("Table/LuaPb/PB",".bytes")
print("<color=yellow>go to table LuaPb</color>")
if pbData == nil then
    pbData = ResourcesLoaderMgr.GetBytesByPath("LuaPb/PB",".bytes")
    print("<color=yellow>go to otherLuaPb</color>")
end
-- print("pbData: "..tostring(pbData))
pb.load(pbData)

local closeNewIndexMetaTable = {
    __newindex = function()
        -- Debugger.LogWarning("you can't use newindex method in protobuf data")
        print("<color=yellow>you can't use newindex method in protobuf data</color>")
        -- error("you can't use newindex method in protobuf data")
    end,
    __index = function(self, filedName)
        local ret = rawget(self, filedName)
        if not rawget(self, filedName) then
            -- Debugger.LogWarning("attempt is visit a not exit field:" .. tostring(filedName))
            print("<color=yellow>attempt is visit a not exit field: " .. tostring(filedName).." </color>")
            -- error("attempt is visit a not exit field:" .. tostring(filedName))
        end
        return ret
    end
}

local sendProtoBufMT = {
    SerializeToString = function(self)
        return pb.encode("KKSG."..self.__MSG_NAME, self)
    end
}
sendProtoBufMT.__index = sendProtoBufMT

---@return usefirststring
function ParseProtoBufToTable(msgName, datas)
    local pbTb = pb.decode("KKSG." .. msgName, datas)
    setmetatable(pbTb, closeNewIndexMetaTable)
    return pbTb
end

local cache = {}

---@return usefirststring
---@param msgName string
function GetProtoBufSendTable(msgName)
    local result
    if #cache > 0 then
        result = cache[#cache]
        table.remove(cache)
    else
        result = {}
    end
    result = pb.decode("KKSG." .. msgName, "", result)
    result.__MSG_NAME = msgName
    setmetatable(result, sendProtoBufMT)
    return result
end

---@return enumValue
---@param msgName string
---@param enumName string
function GetNumberByPBEnum(msgName, enumName)
    return pb.enum("KKSG."..msgName, enumName)
end

function RecycleProtoBuf(msgData)
    if not msgData then
        return
    end
    for k,_ in pairs(msgData) do
        msgData[k] = nil
    end
    setmetatable(msgData, nil)
    cache[#cache + 1] = msgData
end

return M